name: Deploy to dev env

on:
  push:
    branches: [ dev ]
jobs:
  build-docker:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: setup jdk 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: add permission to gradlew
        run: chmod +x ./gradlew
        shell: bash

      - name: aws configure
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public

      - name: build docker file and setting deploy files
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: cicd-test-v2
          ECR_REGISTRY_ALIAS: b0t3v2v2
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          mkdir scripts
          touch scripts/deploy.sh
          echo "aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin public.ecr.aws/$ECR_REGISTRY_ALIAS" >> scripts/deploy.sh
          echo "docker pull public.ecr.aws/$ECR_REGISTRY_ALIAS/$ECR_REPOSITORY:$IMAGE_TAG" >> scripts/deploy.sh
          echo "docker run -p 8080:8080 -e PROFILE=dev -d --restart always --name test public.ecr.aws/$ECR_REGISTRY_ALIAS/$ECR_REPOSITORY:$IMAGE_TAG" >> scripts/deploy.sh
      - name: upload to s3
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          zip -r deploy-$IMAGE_TAG.zip ./scripts appspec.yml
          aws s3 cp --region ap-northeast-2 --acl private ./deploy-$IMAGE_TAG.zip s3://cicd-test-v2-bucket
      - name: start deploy
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          aws deploy create-deployment --region ap-northeast-2 \
          --application-name cicd-test-v2-code-deploy  \
          --deployment-config-name CodeDeployDefault.OneAtATime \
          --deployment-group-name cicd-test-v2-code-deploy-group  \
          --s3-location bucket=cicd-test-v2-bucket,bundleType=zip,key=deploy-$IMAGE_TAG.zip

  check-deployment-status:
    needs: build-docker
    runs-on: ubuntu-latest
    steps:
      - name: aws configure
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Check CodeDeploy Deployment Status
        run: |
          DEPLOYMENT_ID=$(aws deploy list-deployments --region ap-northeast-2 --application-name cicd-test-v2-code-deploy --deployment-group-name cicd-test-v2-code-deploy-group --query "deployments[0]" --output text)
          aws deploy wait deployment-successful --deployment-id $DEPLOYMENT_ID

      - name: Get Deployment Details
        run: |
          DEPLOYMENT_ID=$(aws deploy list-deployments --region ap-northeast-2 --application-name cicd-test-v2-code-deploy --deployment-group-name cicd-test-v2-code-deploy-group --query "deployments[0]" --output text)
          aws deploy get-deployment --deployment-id $DEPLOYMENT_ID --query "deploymentInfo.[status, creator]" --output text